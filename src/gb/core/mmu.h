// ANDER MARTINEZ 2014

#pragma once
#include <cstddef>
#include <stdint.h>

#include "gpu.h"
#include "input.h"

namespace gamelad{
	static const size_t memory_size = 0x10000;
	struct Memory{
		friend class CPU;
		friend class GB;
		
		bool in_bios;
		GPU& gpu;
		INPUT input;
	protected:
		uint8_t *rom0; // 16kB ROM bank #0 (cartridge)
		uint8_t *romx; // 16kB switchable ROM bank (cartridge)
		uint8_t eram[0xC000 - 0xA000]; // 8KB External RAM 
		uint8_t ram0[0xD000 - 0xC000]; // 4KB Work RAM (WRAM) bank 0
		uint8_t ramx[0xE000 - 0xD000]; // 4KB Work RAM bank 1~7
		uint8_t IF; // 0xFF0F Interrupts
		uint8_t hram[0xFFFF - 0xFF80]; // High RAM (HRAM)
		uint8_t IE; // 0xFFFF Interrupts
		/*
		uint8_t rom0[0x4000 - 0x0000]; // 16kB ROM bank #0 (cartridge)
		uint8_t rom1[0x8000 - 0x4000]; // 16kB switchable ROM bank (cartridge)
		uint8_t vram[0xA000 - 0x8000]; // 8kB Video RAM
		uint8_t echo[0xFE00 - 0xE000]; // Mirror of C000~DDFF (ECHO) (Typically not used)
		uint8_t sprt[0xFEA0 - 0xFE00]; // Sprite attribute table (OAM)
		uint8_t iore[0xFF00 - 0xFEA0]; // Empty but unusable for I/O
		uint8_t ior1[0xFF4C - 0xFF00]; // I/O Registers
		uint8_t ior2[0xFF80 - 0xFF4C]; // Empty but unusable for I/O
		uint8_t inte; // Interrupt] Enable Register 0xFFFF
		*/
	public:
		uint8_t  rb(uint16_t addr);
		uint16_t rw(uint16_t addr);
		void wb(uint16_t addr, uint8_t v);
		void ww(uint16_t addr, uint16_t v);
		Memory(GPU& gpu_, uint8_t* rom);

		#ifdef DEBUG
		void dump(uint16_t from = 0x0000, uint16_t to = 0xffff);
		#endif
	};

	static const uint8_t bios[] = {
	    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
	    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
	};
}